<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[i think]]></title>
  <link href="http://msky026.github.io/atom.xml" rel="self"/>
  <link href="http://msky026.github.io/"/>
  <updated>2018-11-01T00:38:03+09:00</updated>
  <id>http://msky026.github.io/</id>
  <author>
    <name><![CDATA[msky026]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015年の振り返り]]></title>
    <link href="http://msky026.github.io/blog/2015/12/30/2015-12-31/"/>
    <updated>2015-12-30T04:23:31+00:00</updated>
    <id>http://msky026.github.io/blog/2015/12/30/2015-12-31</id>
    <content type="html"><![CDATA[<p>直前まで某所のイベントに参加していましたので、実はこれを書いているのは<del>12月30日です。</del>結局年が明けてしまいました。</p>

<p>皆様明けましておめでとうございます。</p>

<p>さて、このブログですが、ほぼほぼ1年間のほったらかしでしたが、本体をNitrous.ioに引っ越したので、少々扱いやすくはなっていると思います。</p>

<p>（やっぱりブログサービスはローカルで扱うより、クラウドサービス的な使い方ができないと安心できないところがあるので）</p>

<p>さて、去年の振り返りとなってしまいましたが、どんな1年だったかをおおまかに振り返ってみます。</p>

<!-- more -->


<h2>Rubyistとして</h2>

<p>2月にRuby認定のsilver（2.1対応）に受かりました。</p>

<p>試験勉強自体はその前の年の12月くらいからやっていたので、かなりの対策を講じてましたが。</p>

<p>2月に初めてrailsの案件に取り掛かります。業務でrails使うのは何気に初だったりするので、常識的作法すらここで初めて知ったといったこともありました。</p>

<p>8月にようやく認定試験goldに受かって何とか基本的知識だけは完備した、と言えるかというと、未だに「そんなことも知らないの？」というレベルのしょうもない事を聞いたりします。。</p>

<p>体調などが悪化し始めてコミュニティ活動は8月過ぎた頃からすっかりご無沙汰になってしまいました。</p>

<h2>データサイエンス</h2>

<p>去年の頭くらいからデータサイエンス勉強会を社内でやってました。</p>

<p>これも途中からご無沙汰になってしまいましたが、今年から再開の予定です。（本当の本当に）</p>

<p>元々、MLCTの第2回に興味本位で参加してからというのが切っ掛けです。</p>

<p>その時から、さっぱりついていけなかったデータ領域に何とか食いつきたい、という意識が湧いてきました。</p>

<p>もう一つは戦略的データサイエンスの翻訳者の人が社内にいて、この機会を活用しないと非常にもったいない気がする、その人を巻き込んででもデータサイエンスの知識を取り込みたかったという思いもあって、じゃあ社内でやってみようと、と。</p>

<p>今となってはIoTとも切れない領域になっていますので、必然性からも、今度こそ本腰入れて取り組もうと思います。</p>

<h2>Crystal</h2>

<p>今となってはどっぷりと浸かってしまっているCrystalですが、何が切っ掛けだったのかは実はよく覚えていません。</p>

<p>確かNitrous.ioでCrystalは動くだろうか、というのを試してからが最初の切っ掛けだったような気がしますが、はっきりとしたことは不明です。</p>

<p>興味本位で第2回の勉強会に参加したのが切っ掛けですが、ここからコミュニティに参加してから、すっかり取り憑かれたと思います。</p>

<p><a href="http://crystal.connpass.com/event/22754/?utm_campaign=event_participate_to_follower&amp;utm_medium=twitter&amp;utm_source=notifications">第3回Crystal勉強会</a>では登壇する機会を頂いたので、何かためになるものを発表できたら、と思います。
今年も目一杯頑張りますよ！</p>

<h2>2016年でやりたいこと</h2>

<p>今年はデベロッパーとして問題解決力、ということを中心として考えていきたと思います。</p>

<p>技術のための技術というより何に役立てるか、という観点を養わなければな、と。</p>

<p>そのための軸として、1つがデータサイエンス（＋機械学習）、もう一つがSalesforce+Herokuに定めています。</p>

<p>コミュニティ活動はRubyと、後Crystalも中心になっていくと思います。特にCrystalはまだ自分も貢献できる領域が多々ありますので、非力ながら尽力していく次第です。</p>

<p>皆様、どうぞ本年もよろしくお願い致します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heroku初心者の俺が24時間（※）以内に作れるだけ何か作る]]></title>
    <link href="http://msky026.github.io/blog/2014/12/19/heroku-advent-2014/"/>
    <updated>2014-12-19T22:38:13+09:00</updated>
    <id>http://msky026.github.io/blog/2014/12/19/heroku-advent-2014</id>
    <content type="html"><![CDATA[<p>※ただし三食昼寝つきである
※24時間しか作らないとは言っていない</p>

<p>この記事は <a href="qiita.com/advent-calendar/2014/heroku">Heroku Advent Calendar 2014</a> の20日目(12/20)の投稿です。<br/>
←19日の投稿<a href="http://qiita.com/hkusu/items/75404aefdb5f89be6b6e">Node.js(Express) と Heroku で Twitter ボットを作る</a></p>

<p>当初yesodで何か作ってherokuにデプロイするまでのを書こうかと思ったんですが、ローカルでは動かせたものの、herokuデプロイ時にyesodのバージョンエラーが置きまして。。。</p>

<p>未だに解決せず、そもそもcoolなtipsを公開してドヤァ！　と出来る実力も無いので、ここは延々更新し続けることをネタにします。</p>

<!-- more -->


<h3>ルール</h3>

<p>20日の0:00 から23:30ぐらい（変動あり）まで作り続ける。
途中三食昼寝有り。
時間が来たらまとめる。出来なかった点は後日に随時追加していく。</p>

<h3>作るもの</h3>

<p>練習なら所謂TODOのWebアプリを作ろうかな、と思ってたんですが、ここはやりかけの「パーフェクトRoR」の6章がまさにそれなので延々そこから作ろうかと。<br/></p>

<h3>材料</h3>

<ul>
<li>Ruby 2.1.2</li>
<li>Rails 4.1</li>
<li>少しの根気</li>
</ul>


<h2>下準備</h2>

<h3>〜0:00</h3>

<p>んでは、取り敢えずrailsの初期化と、githubの登録まで行います。</p>

<p>あ、そうそう、powderどうでしょう、ということで使ってみます。
daitokaietでも使ってましたけど、これは便利です。</p>

<p>参考<a href="http://mako-wis.hatenablog.com/entry/20131220/p1">#daitokaiet の開発環境構築</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl get.pow.cx | sh
</span><span class='line'>echo "export PATH=$PATH" &gt;&gt; ~/.powconfig</span></code></pre></td></tr></table></div></figure>


<p>powderのインストールも続けて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install powder</span></code></pre></td></tr></table></div></figure>


<p>の後に、プロジェクトルートディレクトリに移動して</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>powder link
</span><span class='line'>powder restart</span></code></pre></td></tr></table></div></figure>


<p>これで、<a href="http://#">http://#</a>{projectname}.dev/
で <a href="http://localhost:3000/">http://localhost:3000/</a> にアクセスしたのと同じページに行けます。
（このtipsはtwitterのapi連携時に非常に便利になる）
※ver 0.5になっていないとYosemiteでハマります
参考<a href="http://qiita.com/jnchito/items/43fcae88cef6df549ec7">Ruby/Rails開発者向け・怖くないYosemiteアップグレードガイド</a></p>

<p>bootstrapを導入。指示のとおりに突っ込んで、etmnk-todo.devを表示したらヘッダ付きの画面が出るようにする。</p>

<h2>開始</h2>

<h3>〜2:00</h3>

<p>twitter apiのOAuthを突っ込む。gemでomniauthとomniauth-twitterを追加。
何かここで既に難航している。。。
具体的には /auth/twitter を叩いても、「No route matches [GET] “/auto/twitter"」となる。。</p>

<p>ここらで力尽きたので一旦落ちまする。。</p>

<h3>〜11:00</h3>

<p>起床。結構寝てしまった。では続き。
気がついたらconfig/secrets.yml をコミットしてしまってたのでこれを履歴ごと削除。
参考Git の履歴からファイルを完全に削除する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git filter-branch http://easyramble.com/git-filter-branch.html
</span><span class='line'>git checkout master
</span><span class='line'>git filter-branch -f --index-filter 'git rm --cached --ignore-unmatch config/secrets.yml' HEAD
</span><span class='line'>git push --force origin master</span></code></pre></td></tr></table></div></figure>


<p>でも未だにログインできず。。
「No route matches [GET] “/auto/twitter"」となる。。</p>

<h3>〜12:00</h3>

<p>うあー、ものっそいマヌケなミスが原因だった。。
/auth/twitter じゃなくて /auto/twitter になってた。。
何箇所かのtypoを直したら何とかログインできた。。</p>

<p>と、ここで気づいたのが未だにherokuにデプロイしてない。
登録処理まで行ったらデプロイする。</p>

<h3>〜17:30</h3>

<p>一応イベント登録処理と削除処理まで作ったのでherokuにデプロイした。
<a href="http://etmnk-todo.herokuapp.com/">etmnk-todo</a></p>

<p>したんだが、CSSが効いてない。。
調べたら設定が必要なんで足してみた。</p>

<p>Gemfile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails_12factor'</span></code></pre></td></tr></table></div></figure>


<p>config/environments/production.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.serve_static_assets = true</span></code></pre></td></tr></table></div></figure>


<p>そして、修正後</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake assets:precompile RAILS_ENV=production
</span><span class='line'>git add .
</span><span class='line'>git commit -m "hoge"
</span><span class='line'>git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>反映されない。。。</p>

<h3>〜21:00</h3>

<p>イベント編集処理を追加。後、postgres使うのを本環境のみにして、ローカルではsqlite3使うように修正。</p>

<p>Gemfile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :development,:test do
</span><span class='line'>  gem 'sqlite3'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>後config/secrets.ymlはherokuの環境で必要なのと、いちいちそのためにブランチ切るのが面倒になったので、設定だけは環境変数に退避してリポジトリに戻した。</p>

<p>CSSの件は先送りのまま。。</p>

<p>追記 application.html.erb内のタグの閉じ忘れでした。。
<a href="https://twitter.com/nakazye/status/546273379355881472">ご指摘</a></p>

<p>大感謝！</p>

<h3>〜22:30</h3>

<p>イベント参加機能と、参加者一覧表示を追加。
目処としてはイベント参加キャンセルまでかな。。</p>

<h2>まとめ</h2>

<p>取り敢えずここで一旦終了です。
まとめに入りますとこんな感じ。</p>

<ul>
<li>railsは結構癖が強い</li>
<li>ルールが未だに掴めない。。</li>
<li>assetsはハマった。。</li>
<li>何か自動化するオプションもあるらしいですが、未検証</li>
<li>テストコードが書けなかった

<ul>
<li>明日以降の重要課題</li>
</ul>
</li>
</ul>


<p>いつものもくもく会の３倍位コードを書き続けましたけど、やってみると結構楽しい。
年末年始もなんかのお題でやってみたいものです。IoTとか、やりかけのyesodとかでも。</p>

<p>さて、Advent　calendarですが、明日も昨日に引き続いて<a href="https://twitter.com/hkusu">@hkusu</a>_さんの記事で、<a href="http://etmnk.github.io/blog/2014/12/19/heroku-advent-2014/">Node.jsとHerokuでAPIサーバを作る</a>ですよ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2014_1日目]]></title>
    <link href="http://msky026.github.io/blog/2014/09/18/rubykaigi2014-1stday/"/>
    <updated>2014-09-18T22:53:55+09:00</updated>
    <id>http://msky026.github.io/blog/2014/09/18/rubykaigi2014-1stday</id>
    <content type="html"><![CDATA[<p>RubyKaigi1日目の内容を忘れないうちに。</p>

<ul>
<li>午前中は用事のため欠席。</li>
<li>午後最初のセッションは「Symbol GC」か「Controller Testing: You’re Doing It Wrong 」か。</li>
<li>A会場とB会場と分かれているため、同時には無理

<ul>
<li>今回は実用的な方から。

<ul>
<li>英語が辛すぎた。。。</li>
<li>内容はTLから後日拾います。。。</li>
</ul>
</li>
</ul>
</li>
<li>2つ目のセッションは「Continuous Delivery at GitHub 」

<ul>
<li>GithubのRob.Sanheim氏のセッション

<ul>
<li>こちらも英語で（ｒｙ</li>
</ul>
</li>
</ul>
</li>
<li>3つ目はいつもお世話になってるHerokuの織田さんのセッション

<ul>
<li>英語で（ｒｙ

<ul>
<li>Herokを動かす上で、気をつけなければならないパフォーマンスチューニングやログチェックの肝の部分など（かろうじて聞き取れた部分</li>
</ul>
</li>
</ul>
</li>
<li>4つ目は、Rubyじゃなくて、メインがEgisonという自作言語の人の話。

<ul>
<li>パターンマッチングのサンプルの例が物凄く纏まっていた。

<ul>
<li>rubyでもある程度再現可能なGemを作った。これでEgisonの次にパターンマッチングに強い言語になった</li>
<li>Haskellよりも強い</li>
<li><a href="http://qiita.com/egisatoshi/items/38f7f8aef32ac67ccd4b">RubyにHaskellよりも強力なパターンマッチを実装した</a>

<ul>
<li>Haskellerこわい（ｒｙ</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>5つ目は「Hypermedia: the Missing Element to Building Adaptable Web APIs in Rails」

<ul>
<li>一言で言うと「WebアプリからWebAPIでデータを呼び出すとき、疎結合を維持したまま呼び出す方法」

<ul>
<li>キモなのは疎結合の部分。それを実現するためのHypermedia。

<ul>
<li>Hypermediaに沿ってWebAPIを実装するなら、HTMLだけでもWebAPIは作れるよ      - 但し、その場合は状態遷移（CRUDや、リンクの遷移など含めて）はキッチリ考慮してないとダメだよねという話だけど、中身が濃い話だったので、後でTLからもう一度拾い直します。。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>本日最後のセッションが「"Gem of this Week" - building culture and making gem」

<ul>
<li>ドリコム社内での、ローカルでのGem駆動の話。

<ul>
<li>仕事に便利な処理をGemに纏めて皆で共有したいけど、Gemをrubygems.orgに公開するには敷居が高いので、ローカルGem配布サーバを立てて、運用している事例の紹介。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>駆け足気味ですけど、大体こんな感じでした。今回ノートPC持ってきてないんで、思い出したり、拾える部分はTLからの取得なので結構抜けがあります。
また、パーティーで喋った「勉強会を主催するならこんなことがやりたい」的なものあるんですが、それはもうちょい纏まってから（大体やりたいことの骨格は決まってますが）にします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TravisCIMeetupTokyoに行ってきた話]]></title>
    <link href="http://msky026.github.io/blog/2014/09/17/traviscimeetuptokyo20140917/"/>
    <updated>2014-09-17T23:48:46+09:00</updated>
    <id>http://msky026.github.io/blog/2014/09/17/traviscimeetuptokyo20140917</id>
    <content type="html"><![CDATA[<p>CI系のツールは実はまだ一度も使ったことのない私が、TravisCIのMeetupイベントに行ってきた時の話をしますと、大体こんな感じでした。</p>

<p>勘所としてはこちらの方を見ながら思い出してます。(LT参加者の方でもあります)</p>

<p><a href="http://shigemk2.hatenablog.com/entry/2014/09/17/Josh%E3%81%95%E3%82%93%EF%BC%8BAsari%E3%81%95%E3%82%93_%23travisci_jp">shさん＋Asariさん #travisci_jpa</a></p>

<ul>
<li>rubyだと複数の言語でそれぞれのテストを試すことが出来る。

<ul>
<li>例えば1.9系と2.0系、2.1系も</li>
<li>更にruby-headとか指定しとくと常に最新のバージョンで確認できるよ</li>
</ul>
</li>
<li>でも最新のバージョンとかで失敗した場合はエラーケースから除外することが出来るよ</li>
<li>仮想化基板はopenvz+docker

<ul>
<li>openvzはカーネルに組み込むタイプの仮想化ツール（1回だけ試したことがある）</li>
<li>1回のコミットごとにVM使い捨て</li>
</ul>
</li>
<li>言語ごとの使用率見ると、フリー版だとnode.js、python、ruby、くらいの順

<ul>
<li>TravisのCEOの人はjsは気に入らないらしい</li>
<li>法人版ではrubyが最多</li>
</ul>
</li>
<li>出力のタイムアウトは10分だけど、秘密コマンドで延長可能

<ul>
<li>でも秘密なんで知りたければコード嫁（OSSだから気合でどうにかなる）</li>
</ul>
</li>
<li>Swiftはそのうち対応？（XCodeはNDAがらみで面倒らしい）</li>
<li>FSのケースセンシティブ（WinとMacはファイル名の大文字小文字区別しない）はハマりどころ

<ul>
<li>開発と本環境でのOSの違いの問題（開発の環境に対して本環境がMacな人は殆どいない）</li>
</ul>
</li>
</ul>


<p>など。（CEOのJosh氏のスピーチは英語だったのでスライドと単語とTwitterのTLで補完）</p>

<p>当方、途中からハンズオンを始めて、Travisのアカウントをgithubで取得し、前半のライブコーディングの内容を写経したり、エラーに悩まされたり、実はただのtypoだったり、と。</p>

<p>懇親会でCircleCI使ってる人の話を伺うと、大体CircleCIと似た感じ、と。ただし、XCodeでテスト出来るのは美味しい。でも高いよね、と。</p>

<p>値段はこちらですか。</p>

<p><a href="https://travis-ci.com/plans">TravisCI Plans</a></p>

<p>その他、各種のCIサービスの比較をまとめてるサイトはこちら</p>

<p><a href="http://suzukaze.hatenablog.jp/entry/2014/04/25/184456">Web(Rails),iOS(Objective-C),Android(Java)で動作するCI(Continuous Integration)を探す</a></p>

<p>個人的な感想を言うと、値段は多少張りますけども、iOS系をちゃんとテストしてくれるサービスはかなり貴重かと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenJDK8uをソースからビルドしてみた]]></title>
    <link href="http://msky026.github.io/blog/2014/09/01/openjdk8u-build/"/>
    <updated>2014-09-01T22:46:51+09:00</updated>
    <id>http://msky026.github.io/blog/2014/09/01/openjdk8u-build</id>
    <content type="html"><![CDATA[<p>前のJJUGイベント（ビール片手にLL大会）から、ふとVM触ってみたい、という気持ちがドゥンドゥン出始めまして、取り敢えずJDK8のソースからビルドして環境構築してみよう、と。</p>

<p>参考にしたページはこちら</p>

<p><a href="http://cco.hatenablog.jp/entry/2013/05/02/213927">OpenJDK 8 をFedora18でビルドする</a></p>

<p>当方の環境はCentOSなので、あまり読み替える箇所もなく、記載の通りで上手くいきました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ソースコード取得するための hg(mercurial)導入
</span><span class='line'>sudo yum install -y hg
</span><span class='line'># 最新のOpenJDK8のソースコード取得
</span><span class='line'>hg clone http://hg.openjdk.java.net/jdk8u/jdk8u openjdk8u
</span><span class='line'># ビルドに必要な関連プロジェクトのソースコード取得
</span><span class='line'>cd openjdk8u
</span><span class='line'>./get_source.sh</span></code></pre></td></tr></table></div></figure>


<p>とかはそのまま。(アップデート版だけ読み替え)</p>

<p>ただ、ビルドのJDKのベースはJDK8にしてますので。
（OracleのサイトからPRMベースでインストール）</p>

<p>ビルドに必要なパッケージは以下のとおり</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ビルドに必要な諸々のパッケージインストール (ないとconfigure/make時にエラー)
</span><span class='line'>sudo yum install -y libXtst-devel libXrender-devel cups-devel freetype-devel alsa-lib-devel libXt-devel</span></code></pre></td></tr></table></div></figure>


<p>こちらに対して、当方の環境では、以下のパッケージを追加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install -y zip unzip  libXi-devel</span></code></pre></td></tr></table></div></figure>


<p>libXi-develは</p>

<p>checking for X11/extensions/XTest.h&hellip; no</p>

<p>対策として。</p>

<p>参考</p>

<p><a href="https://fedorahosted.org/bodhi/ticket/697">&ldquo;Can not find XTest.h&rdquo; error during build for fc19 and fc18</a></p>

<p>後は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configurea
</span><span class='line'>make all</span></code></pre></td></tr></table></div></figure>


<p>で。30分から1時間くらいでビルドバイナリが出来ると思います。</p>

<p>後は動かしながらソースの階層を追ったり。</p>

<p>取っ掛かりの参考はこちら</p>

<p><a href="http://www.slideshare.net/torazuka/jvm-28095989">JJUG CCC 2013 Fall「JVMコードリーディング入門-JVMのOS抽象化レイヤーについて-」</a></p>

<p>地道にやっていこうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「BREAK TIME NIGHT Vol.1 HTML5とPDCAサイクル」に行ってきた]]></title>
    <link href="http://msky026.github.io/blog/2014/08/21/break-time-night-vol1/"/>
    <updated>2014-08-21T23:08:34+09:00</updated>
    <id>http://msky026.github.io/blog/2014/08/21/break-time-night-vol1</id>
    <content type="html"><![CDATA[<p>今日は「Break Time Night vol.1 HTML5とPDCAサイクル」に行ってきまして、そのままの勢いでレポ書きます。
レポというか、どちらかと言うとメモ書きですが。。。</p>

<hr />

<h2>PDCAサイクルを用いたWebサイト運用法</h2>

<p>PR TIMES の運用担当の方</p>

<p><a href="http://prtimes.jp">PR TIMES</a>
の運用事例を紹介。</p>

<h3>分析ツール</h3>

<ul>
<li>google analytics</li>
</ul>


<p>一般的な分析</p>

<ul>
<li>user insight</li>
</ul>


<p>ヒートマップの表示</p>

<h3>テスト技法</h3>

<ul>
<li>A/Bテスト</li>
</ul>


<p>2つのオプションを比較してより良い方を採用する。</p>

<ul>
<li>prtimesの場合</li>
</ul>


<p>画像と動画で比較しコンバージョン率の高い方を採用 →　動画に決定</p>

<h3>多変量テスト</h3>

<p>互いに作用する複数のオプションを比較</p>

<p>単純なA/Bテストよりも複雑なデータを取得できる。</p>

<p>例）</p>

<p>ボタンの左右入れ替え</p>

<p>色を変えたり</p>

<p>A B</p>

<p>B A</p>

<p>A' B'</p>

<p>B' A'</p>

<p>の合計4パターンのテストケース</p>

<p>ただし、より多くのトラフィック、時間が必要となる、</p>

<h3>多腕バンディット</h3>

<p>最も利益の大きい選択肢の特定を目標とする。
ランダム分布がテストの進行とともに更新される。</p>

<p>例）</p>

<p>4パターンのボタンのパターン</p>

<p>1日目</p>

<p>それぞれのボタンの表示率を25%ずつとる</p>

<p>それらに対してコンバージョン率を見る。</p>

<p>2日目</p>

<p>1日目のコンバージョン率に基いて表示率を変える</p>

<p>累計のコンバージョン率を見る。</p>

<p>3日目</p>

<p>2日目の累計コンバージョン率に基づいて表示率を変える。</p>

<hr />

<h2>UI/UXの設計</h2>

<p> 日本ディレクション協会　小嶋様</p>

<ul>
<li>椅子の例</li>
</ul>


<p>椅子の値段はどのようにして決まる？
どこで、どのように使うか。</p>

<p>赤坂ガーデンシティ18階会議室に入ってきて、そこにおいてある椅子を見る場合。</p>

<table>
<thead>
<tr>
<th>UXの流れ→  </th>
<th>見た　　 　　   </th>
<th>着席　　　　　　</th>
<th>離席            </th>
</tr>
</thead>
<tbody>
<tr>
<td>気持ち      </td>
<td>なんか落ち着く   </td>
<td>リラックスする </td>
<td>また来ようかな   </td>
</tr>
</tbody>
</table>


<p>ユーザの一連の体験が次の行動に結びつくように設計。</p>

<p>→ショッピングサイトだと、ただユーザが商品をカートに入れて購入ボタンを押すだけで終わりではない。</p>

<p>購入後に、またトップページへ戻り、別の商品を購入する機会も考えなければならない。</p>

<p>UX設計は、画面にとらわれ過ぎないこと。</p>

<p>特にスマートフォンは見ている人が、どんなシチュエーションで見ているかが千差万別であるため、UXのパターンはいくつも考えておく必要がある。</p>

<p>Nordstrom（デパート） のipadアプリ開発の例
URL:<a href="https://www.youtube.com/watch?v=szr0ezLyQHY">https://www.youtube.com/watch?v=szr0ezLyQHY</a></p>

<p>アジャイルという単語こそ出てきてないけど、1週間（うろ覚えだけど、決められた期間の間）で細かい単位で作り始めて、改善をひたすら繰り返していく作業工程。</p>

<hr />

<h2>HTML5概要+コードサンプル</h2>

<p>W3C ダニエル・デイビス様</p>

<p>サンプルコードはこちら
<a href="http://bit.ly/html5code">bit.ly/html5code</a></p>

<p>HTML5の普及事例。</p>

<p>TV　LGの例：WebOS</p>

<p>そのうち車にも搭載するかもしれない。</p>

<h3>HTML5　APIの事例</h3>

<p>getUserMedia</p>

<p>カメラとマイクのデータ取得</p>

<p>マイクで拾った音で画像を動かしたり、ルーレット的に動かしたり</p>

<p>→事例では風車の画像。</p>

<p>　息をマイクに吹きかけると風車が回る。</p>

<p>ex)サンプルコード</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>navigator.getUserMedia({video: true},successsCallback, errorCallback);
</span><span class='line'>
</span><span class='line'>functon successCallback(stream) {
</span><span class='line'>    video.src = (window.URL && window.URL.createobjectURL(stream)) || stream;
</span><span class='line'>    video.paly();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Geolocation API</p>

<p>位置情報</p>

<p>ex)サンプルコード</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>navigator.geolocation.getCurrentPosition(showMap);
</span><span class='line'>
</span><span class='line'>function showMap(position) {
</span><span class='line'>// position オブジェクト
</span><span class='line'>// (position.coords.latitude, position.coords.longitude);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Device Orientatin API</p>

<p>デバイスオリエンテーション</p>

<p>　加速度センサー</p>

<p>　方向センサー</p>

<p>ex)サンプルコード</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>window.ondevicemotion = function(event) {
</span><span class='line'>//event.accelaration オブジェクト
</span><span class='line'>//{x:0, y:0,z:-9.81}
</span><span class='line'>
</span><span class='line'>// event.rotationRate オブジェクト
</span><span class='line'>//{alpha:0, beta: 0,gamma: -v/r*180/pi}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>System Infomation API</p>

<p>システム情報</p>

<p>気温</p>

<p>気圧</p>

<p>湿度</p>

<p>騒音</p>

<p>距離感</p>

<p>ex)サンプルコード</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>navigator.system.monitor("Terminal", suscess);
</span><span class='line'>
</span><span class='line'>function success(thermal) {
</span><span class='line'>
</span><span class='line'>// thermal オブジェクト
</span><span class='line'>// thermal.state = 気温
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>javascript プロミス</p>

<p>（最新版）</p>

<p>次期Javascript仕様</p>

<p>→要調査</p>

<h3>WebSocket API/ WebRTC</h3>

<p>事例</p>

<p>appear.in</p>

<p>簡易Webチャットルームを作成し、共有できるサービス</p>

<p>ex)サンプルコード</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ウェブソケットの作成
</span><span class='line'>
</span><span class='line'>var socket = new WebSocket('ws://example.com/update');
</span><span class='line'>
</span><span class='line'>socket.onopen = function () {
</span><span class='line'>  // 接続するときに実行するコード
</span><span class='line'>  setInterval(function() {
</span><span class='line'>    if(socket.bufferdAmount == 0)
</span><span class='line'>      socket.send(getUpdateData());
</span><span class='line'>  }, 50);
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>Offline Storate</p>

<p>オフラインストレージ</p>

<p>ServiceWorker (ファイル,　コード)</p>

<p>localStrage (文字列)</p>

<p>IndexedDb (データベース)</p>

<p>Responsive Images</p>

<p>レスポンシブイメージ</p>

<p>ex)サンプルコード</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;picture&gt; 要素
</span><span class='line'>srcset 属性
</span><span class='line'>
</span><span class='line'>&lt;picture&gt;
</span><span class='line'>  &lt;source media="(min-width: 45em)" srcset="大画像"&gt;
</span><span class='line'>  &lt;source media="(min-width: 18em)" srcset="中画像"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;img src="小さい画像"&gt;
</span><span class='line'>&lt;/picture&gt;</span></code></pre></td></tr></table></div></figure>


<p>フィリップスの電球
hue</p>

<p>（お値段27000円とのこと）</p>

<p>電球とセットでルータ（のようなもの）がついてくる。</p>

<p>ルータから電球にメッセージを送って制御できる。</p>

<p>これといって、電球として飛び抜けた高機能というわけではないが、メッセージの送り方によっては
TVの色を拾ったりとかして、表示色を動的に変えることとかができたりする。</p>

<hr />

<p>と、ざっと箇条書きにするとこんな感じです。</p>

<p>読み返してみると、本当に自分用のメモです、本当にありがとうございました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三菱シーケンサ MELSECに電文を投げる]]></title>
    <link href="http://msky026.github.io/blog/2014/08/18/message-to-melsec/"/>
    <updated>2014-08-18T23:27:20+09:00</updated>
    <id>http://msky026.github.io/blog/2014/08/18/message-to-melsec</id>
    <content type="html"><![CDATA[<p>前の投稿からえらい時間が過ぎてしまったんだけども、整理するという意味で書いときたかったこと。
三菱のシーケンサMELSECのFシリーズとTCP（UDPでも行ける）通信するための制御をPythonで書いた時の話。</p>

<p>基本的にはこちらのページの参考</p>

<p><a href="http://www.takach.net/pc/melsec_socket.html">Perlで三菱シーケンサーとSocket通信</a></p>

<p>上記はMCプロトコルの3Eだけど、こちら1Eの話。
基本的にはマニュアル通りに読み進めて、上記サイトを読み替えればいい。</p>

<p>前回書いたのはマニュアル斜め読みだったので、今度のは実際に動かしたもの。</p>

<p>実例はこちら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># -*- coding: utf-8 -*-
</span><span class='line'>import struct
</span><span class='line'>import binascii
</span><span class='line'>
</span><span class='line'>def MakeMessageHeader():
</span><span class='line'>  """
</span><span class='line'>  送信電文を作る
</span><span class='line'>  @return s_data メッセージヘッダ
</span><span class='line'>  """
</span><span class='line'>  #サブヘッダ
</span><span class='line'>  #00 シーケンサのポートの状態を読み出す
</span><span class='line'>  #02 ヘッダの情報を書込
</span><span class='line'>  # だいたい書き込む時しか使わない
</span><span class='line'>  subh =  struct.pack('B', 0x02)
</span><span class='line'>  #PC番号
</span><span class='line'>  #FF固定
</span><span class='line'>  pc = struct.pack('B',0xff)
</span><span class='line'>  #監視タイマ
</span><span class='line'>  #2500msの場合 -&gt; 000a
</span><span class='line'>  cpu_timer = []
</span><span class='line'>  # リトルエンディアン
</span><span class='line'>  # 0x000a -&gt; 0x0a 0x00
</span><span class='line'>  cpu_timer.append(struct.pack('B',0x0a))
</span><span class='line'>  cpu_timer.append(struct.pack('B',0x00))
</span><span class='line'>
</span><span class='line'>  #先頭デバイスアドレス
</span><span class='line'>  #10進数アドレスを16進数換算で表記
</span><span class='line'>  # 400のアドレスに書き込む場合は 400を16進数に変換(0x190)
</span><span class='line'>  #(400)10 -&gt; (0190)16
</span><span class='line'>  #32バイト詰め
</span><span class='line'>  hd_addr = []
</span><span class='line'>  hd_addr.append(struct.pack('B',0x90))
</span><span class='line'>  hd_addr.append(struct.pack('B',0x01))
</span><span class='line'>  hd_addr.append(struct.pack('B',0x00))
</span><span class='line'>  hd_addr.append(struct.pack('B',0x00))
</span><span class='line'>  hd_addr.append(struct.pack('B',0x00))
</span><span class='line'>
</span><span class='line'>  #先頭デバイス
</span><span class='line'>  #Mデバイスの場合 0x4d20
</span><span class='line'>  hd = []
</span><span class='line'>  hd.append(struct.pack('B',0x20))
</span><span class='line'>  hd.append(struct.pack('B',0x4d))
</span><span class='line'>
</span><span class='line'>  #デバイス点数
</span><span class='line'>  #ここではM400から8ポート分使うものとする
</span><span class='line'>  d_num = struct.pack('B',0x08)
</span><span class='line'>
</span><span class='line'>  #区切り
</span><span class='line'>  deli = struct.pack('B',0x00)
</span><span class='line'>
</span><span class='line'>  #データに詰める
</span><span class='line'>  s_data = []
</span><span class='line'>  s_data.append(subh)
</span><span class='line'>  s_data.append(pc)
</span><span class='line'>  s_data.append(cpu_timer)
</span><span class='line'>  s_data.append(hd_addr)
</span><span class='line'>  s_data.append(hd)
</span><span class='line'>  s_data.append(d_num)
</span><span class='line'>  s_data.append(deli)
</span><span class='line'>
</span><span class='line'>  return s_data</span></code></pre></td></tr></table></div></figure>


<p>おおまかな流れは</p>

<ul>
<li>サブヘッダ（読み出しか書き込みかの判別）</li>
<li>PC番号</li>
<li>監視タイマ</li>
<li>先頭デバイスアドレス</li>
<li>先頭デバイス種別</li>
<li>デバイス点数</li>
<li>区切り</li>
</ul>


<p>の流れでヘッダの完成。
区切りはヘッダ部とデータ部の切り分けのため、らしい。</p>

<p>データ部の書き方は、1バイトの上位バイト下位バイトでデバイス2点のオンオフを判別する。
例としてこんな感じ。</p>

<p>0x11010011 &lt;- 1:ON 2:ON 3:OFF 4:ON 5:0FF 6:OFF 7:ON 8:ON</p>

<p>データの格納は取り敢えず先頭から書いとけばいい。
0x11
0x01
0x00
0x11
の順で。</p>

<p>これをさっきのヘッダの後にくっつけて送れば、OK。</p>

<p>これで他に分からないところがあったら、マニュアル見てください。。（丸投げ</p>
]]></content>
  </entry>
  
</feed>
